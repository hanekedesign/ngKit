{"version":3,"file":"ngkit.js.map","sources":["ng://ngkit/config.ts","ng://ngkit/services/event.ts","ng://ngkit/services/storage.ts","ng://ngkit/services/token.ts","ng://ngkit/services/http.ts","ng://ngkit/models/cache-item.ts","ng://ngkit/models/model.ts","ng://ngkit/models/policy.ts","ng://ngkit/models/user.ts","ng://ngkit/services/authorization.ts","ng://ngkit/services/authentication.ts","ng://ngkit/services/social-authentication.ts","ng://ngkit/services/cache.ts","ng://ngkit/guards/auth-guard.ts","ng://ngkit/guards/auth-resolve-guard.ts","ng://ngkit/services/http-interceptor.ts","ng://ngkit/services/http-auth-interceptor.ts","ng://ngkit/providers.ts","ng://ngkit/ngkit.module.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport * as _ from 'lodash';\n\n@Injectable()\nexport class Config {\n    /**\n     * Default configuration.\n     */\n    static defaultOptions: any = {\n        /**\n         * Authentication settings.\n         */\n        authentication: {\n            /**\n             * Common endpoints for authentication sercice.\n             */\n            endpoints: {\n                check: '',\n                forogotPassword: '',\n                getUser: '',\n                login: '',\n                logout: '',\n                register: '',\n                resetPassword: '',\n                socialAuth: ''\n            },\n            /**\n             * Methods used for authentication.\n             */\n            method: {\n                token: true\n            },\n            /**\n             * Social provider configuration.\n             */\n            social: {\n                facebook: {\n                    id: '',\n                    version: 'v2.6',\n                    xfbml: true,\n                    scope: 'public_profile,email'\n                },\n                twitter: {\n                    id: ''\n                },\n                redirectTo: '',\n                oauthProxy: ''\n            }\n        },\n        /**\n         * Authorization options.\n         */\n        authorization: {},\n        /**\n         * Http options.\n         */\n        http: {\n            /**\n             * Based url for http requests.\n             */\n            baseUrl: '',\n            /**\n             * Default headers for http request.\n             */\n            headers: {}\n        },\n        /**\n         * Storage Options\n         */\n        storage: {\n            name: 'ngkitStorage'\n        },\n        /**\n         * Token options.\n         */\n        token: {\n            /**\n             * Default name of authorization token read from responses.\n             */\n            readAs: 'token',\n            /**\n             * Default name of authorization token that is stored.\n             */\n            storeAs: '_token',\n            /**\n             * Scheme to use in Authorization header along with token.\n             */\n            scheme: 'Bearer'\n        },\n        /**\n         * Cache service options.\n         */\n        cache: {\n            /**\n             * Default expiration time in minutes.\n             */\n            expires: 5\n        },\n        /**\n         * Enable debug mode.\n         */\n        debug: false\n    }\n\n    /**\n     * Config options.\n     */\n    options: any;\n\n    /**\n     * Create a new instance of the service..\n     */\n    constructor(@Inject('ngKitOptions') private _options: any) {\n        this.options = Config.defaultOptions;\n        this.setOptions(this._options);\n    }\n\n    /**\n     * Return the configurable options.\n     */\n    getOptions(): any { return this.options; }\n\n    /**\n     * Get an option by key.\n     *\n     * @param   key\n     * @param   override\n     */\n    get(key: string, override: any = false): any {\n        return Config.getItem(key, override)\n    }\n\n    /**\n     * Static method to get an option by key.\n     *\n     * @param   key\n     * @param   override\n     */\n    static getItem(key: string, override?: any): any {\n        if (override) {\n            return override;\n        }\n\n        if (Config.defaultOptions) {\n            return key.split('.').reduce((o, i) => o[i], Config.defaultOptions);\n        }\n    }\n\n    /**\n     * Set an option by key.\n     *\n     * @param   key\n     * @param  value\n     */\n    setItem(key: string, value: any): any {\n        return _.set(this.options, key, value);\n    }\n\n    /**\n     * Set the configurable options.\n     *\n     * @param  options\n     */\n    setOptions(options: any): Config {\n        this.options = _.merge(this.options, options);\n\n        return this;\n    }\n}\n","import { Observable, Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class Event {\n    /**\n     * Event channels.\n     */\n    static channels: Subject<any>[] = [];\n\n    /**\n     * Get an event listener.\n     *\n     * @param  key\n     */\n    static channel(key: any): Subject<any> {\n        if (typeof Event.channels[key] === 'undefined') {\n            Event.channels[key] = new Subject<any>();\n        }\n\n        return Event.channels[key];\n    }\n\n    /**\n     * Set multiple event channels.\n     *\n     * @param events\n     */\n    setChannels(channels: string[]): void {\n        channels.forEach((channel) => Event.channel(channel));\n    }\n\n    /**\n     * Broadcast an event to a channel.\n     */\n    broadcast(key: string, data = {}): Promise<any> {\n        return Promise.resolve(Event.channel(key).next(data));\n    }\n\n    /**\n     *  Listen on a channel for an event.s\n     *\n     * @param  key\n     */\n    listen(key: string): Observable<any> {\n        return Event.channel(key).asObservable();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../config';\nimport * as localForage from \"localforage\";\n\nexport interface StorageDriver {\n    /**\n     * The database of the storage provider.\n     */\n    db: any;\n\n    /**\n     * Get an item from storage.\n     *\n     * @param   key\n     */\n    get(key: string): Promise<any>;\n\n    /**\n     * Set an item to storage.\n     *\n     * @param  key\n     * @param  value\n     */\n    set(key: string, value: any): Promise<any>;\n\n    /**\n     * Remove an item from storage.\n     *\n     * @param key\n     */\n    remove(key: string): Promise<any>;\n\n    /**\n     * Clear storage.\n     */\n    clear(): Promise<any>;\n}\n\n@Injectable()\nexport class Storage implements StorageDriver {\n    /**\n     * The database of the storage provider.\n     */\n    db: any;\n\n    /**\n     * Create a new instance of the service.\n     *\n     * @param config\n     */\n    constructor(private config: Config) {\n        this.db = localForage.createInstance({\n            name: this.config.get('storage.name')\n        });\n    }\n\n    /**\n     * Get item from local storage.\n     */\n    get(key: string): Promise<any> {\n        return this.db.getItem(key);\n    }\n\n    /**\n     * Set an item to local storage.\n     *\n     * @param  key\n     * @param  value\n     */\n    set(key: string, value: any): Promise<any> {\n        return this.db.setItem(key, value);\n    }\n\n    /**\n     * Remove an item from local storage.\n     *\n     * @param   key\n     */\n    remove(key: string): Promise<any> {\n        return this.db.removeItem(key);\n    }\n\n    /**\n     * Clear local storage.\n     */\n    clear(): Promise<any> {\n        return this.db.clear();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Storage } from './storage';\nimport { Config } from './../config';\n\n@Injectable()\nexport class Token {\n    /**\n     * Name of token stored in local storage.\n     */\n    protected _token: string = '_token';\n\n    /**\n     * Constructor.\n     *\n     * @param  config\n     * @param  storage\n     */\n    constructor(\n        public config: Config,\n        private storage: Storage\n    ) { }\n\n    /**\n     * Get the token from local storage.\n     *\n     * @param  tokenName\n     */\n    get(tokenName?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            tokenName = tokenName || this.config.get('token.name', this._token);\n\n            this.storage.get(tokenName).then(token => {\n                resolve(token);\n            }, err => reject(err));\n        });\n    }\n\n    /**\n     * Store the token in local storage.\n     *\n     * @param  token\n     * @param  tokenName\n     */\n    set(token: string, tokenName?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            tokenName = tokenName || this.config.get('token.name', this._token);\n\n            if (token) {\n                this.storage.set(tokenName, token).then(() => {\n                    resolve(true);\n                }, () => reject('Error: Could not store token.'));\n            } else {\n                reject('Error: No token provided.');\n            }\n        });\n    }\n\n    /**\n     * Remove token from local storage.\n     *\n     * @param  tokenName\n     */\n    remove(tokenName?: string): boolean {\n        tokenName = tokenName || this.config.get('token.name', this._token);\n\n        this.storage.remove(tokenName);\n\n        return true;\n    }\n\n    /**\n     * Read a token from a response object.\n     *\n     * @param  response\n     */\n    read(response: any = null): string {\n        if (response) {\n            let key = this.config.get('token.readAs');\n\n            return key.split('.').reduce((o: any, i: string) => o[i], response);\n        }\n\n        return null;\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Config } from './../config';\nimport { Event } from './event';\nimport { Token } from './token';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\n\n@Injectable()\nexport class Http implements OnDestroy {\n    /**\n     * Create a new instance of the service.\n     *\n     * @param  config\n     * @param  event\n     * @param  token\n     */\n    constructor(\n        public config: Config,\n        public event: Event,\n        public token: Token\n    ) {\n        this.setDefaultHeaders();\n        this.eventListeners();\n    }\n\n    /**\n     * Assignable base url for http calls.\n     */\n    baseUrl: string = '';\n\n    /**\n     * Headers to be sent with all http calls.\n     */\n    public headers: HttpHeaders = new HttpHeaders();\n\n    /**\n     * The subsciptions of the service.\n     */\n    subs: any = {};\n\n    /**\n     * On service destroy.\n     */\n    ngOnDestroy(): void {\n        Object.keys(this.subs).forEach(k => this.subs[k].unsubscribe());\n    }\n\n    /**\n     * Build url parameters for requests.\n     *\n     * @param  params\n     */\n    buildParams(params: any): HttpParams {\n        var query_params = new HttpParams();\n\n        if (params) {\n            Object.keys(params).forEach((key: any) => {\n                if (params[key]) query_params.set(key, params[key]);\n            });\n        }\n\n        return query_params;\n    }\n\n    /**\n     * Event listeners.\n     */\n    private eventListeners(): void {\n        if (this.event) {\n            let sub = () => this.setDefaultHeaders();\n            this.subs['auth:loggingIn'] = this.event.listen('auth:loggingIn').subscribe(sub);\n            this.subs['auth:loggedOut'] = this.event.listen('auth:loggedOut').subscribe(sub);\n            this.subs['auth:check'] = this.event.listen('auth:check').subscribe(sub);\n        }\n    }\n\n    /**\n     * Get url for http request.\n     *\n     * @param  url\n     */\n    public getUrl(url: string): string {\n        if (url.startsWith('/') || url.startsWith('http')) return url;\n\n        let baseUrl = this.baseUrl || this.config.get('http.baseUrl') || '';\n\n        return (baseUrl) ? baseUrl + '/' + url : url;\n    }\n\n    /**\n     * Set the default headers for http request.\n     */\n    setDefaultHeaders(): void {\n        let configHeaders = (this.config) ? this.config.get('http.headers') : null;\n\n        if (configHeaders) {\n            Object.keys(configHeaders).forEach(key => {\n                this.headers = this.headers.set(key, configHeaders[key]);\n            });\n        }\n\n        this.tokenHeader();\n    }\n\n    /**\n     * Add a token header to the request.\n     */\n    tokenHeader(): Promise<any> {\n        return new Promise((resolve) => {\n            if (this.config && this.config.get('authentication.method.token')) {\n                this.token.get().then(token => {\n                    let scheme = this.config.get('token.scheme');\n                    let value = (scheme) ? `${scheme} ${token}` : token;\n                    this.headers = this.headers.set('Authorization', value);\n                    resolve(token ? true : false);\n                }, () => {\n                    this.headers = this.headers.delete('Authorization');\n                    resolve(false);\n                });\n            }\n        })\n    }\n}\n","/**\n * Model for cache items.\n */\nexport class CacheItemModel {\n    /**\n     * When the cache item expires.\n     */\n    _expires: number;\n\n    /**\n     * The value of the cache item.\n     */\n    _value: any;\n\n    /**\n     * Construcotr.\n     *\n     * @param  item\n     */\n    constructor(item: any) {\n        Object.assign(this, item)\n    }\n\n    /**\n     * Get value accessor parses JSON.\n     */\n    get value(): any {\n        return JSON.parse(this._value);\n    }\n\n    /**\n     * Set the value mutator that stringifies value.\n     *\n     * @param  value\n     */\n    set value(value: any) {\n        this._value = JSON.stringify(value);\n    }\n\n    /**\n     * Get expires accessor.\n     */\n    get expires(): number {\n        return this._expires;\n    }\n\n    /**\n     * Set the expires mutator.\n     *\n     * @param  minutes\n     */\n    set expires(minutes: number) {\n        let expiration = new Date();\n        expiration.setMinutes(expiration.getMinutes() + minutes);\n        this._expires = expiration.getTime();\n    }\n\n    /**\n     * Check if cached item is expired.\n     */\n    isExpired(): boolean {\n        return this.expires <= new Date().getTime();\n    }\n}\n","import * as moment from 'moment';\n\nexport class Model {\n    /**\n     * Create a new instance of the mdoel.\n     *\n     * @param  attributes\n     */\n    constructor(attributes?: any) {\n        if (typeof attributes === 'string') {\n            attributes = JSON.parse(attributes);\n        }\n\n        Object.assign(this, attributes);\n    }\n\n    /**\n     * Moment JS\n     *\n     * @return moment\n     */\n    moment = moment;\n}\n","export class PolicyModel {\n    /**\n     * Name of the policy.\n     */\n    name: string;\n\n    /**\n     * The objects of the defined policy.\n     */\n    objects: any[] = [];\n\n    /**\n     * Constructor.\n     *\n     * @param  policy\n     */\n    constructor(policy: any) {\n        Object.assign(this, policy);\n    }\n}\n","import { Authorization } from '../services/authorization';\n\nexport class UserModel {\n    /**\n     * Create a new instance of the model.\n     *\n     * @param authorization\n     * @param user\n     */\n    constructor(\n        private authorization: Authorization,\n        public user: object\n    ) {\n        Object.assign(this, user);\n    }\n\n    /**\n     * Check if user can perform action based on a policy.\n     *\n     * @param  key\n     * @param  value\n     */\n    can(key: string, value: any): boolean {\n        return this.authorization.checkPolicy(key, value);\n    }\n\n    /**\n     * Check if user cannot perform action based on a policy.\n     *\n     * @param  key\n     * @param  value\n     */\n    cannot(key: string, value: any): boolean {\n        return !this.authorization.checkPolicy(key, value);\n    }\n\n    /**\n     * Allow a user to perform action based on a policy.\n     *\n     * @param  policyName\n     * @param  object\n     * @param  allowed\n     */\n    allow(policyName: string, object: any, allowed: Function | boolean): UserModel {\n        if (typeof allowed === 'function' && allowed()) {\n            this.authorization.addPolicy(policyName, object);\n        } else if (typeof allowed === 'boolean' && allowed) {\n            this.authorization.addPolicy(policyName, object);\n        } else {\n            this.authorization.removePolicy(policyName, object);\n        }\n\n        return this;\n    }\n\n    /**\n     * Don't allow a user to perform action based on a policy.\n     *\n     * @param  policyName\n     * @param  object\n     * @param  allowed\n     */\n    disallow(policyName: string, object: any): UserModel {\n        this.authorization.removePolicy(policyName, object);\n\n        return this;\n    }\n\n    /**\n     * Identify a user with a role.\n     *\n     * @param role\n     */\n    identify(role: string): UserModel {\n        this.authorization.addPolicy('roles', role);\n\n        return this;\n    }\n\n    /**\n     * Check if a user is identified as a role.\n     *\n     * @param  role\n     */\n    is(role: string): boolean {\n        return this.authorization.checkPolicy('roles', role);\n    }\n\n    /**\n     * Check if a user is not identified with a role.\n     *\n     * @param  role\n     */\n    isNot(role: string): boolean {\n        return !this.authorization.checkPolicy('roles', role);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { PolicyModel } from './../models/index';\n\n@Injectable()\nexport class Authorization {\n    /**\n     * Active Policies\n     */\n    policies: PolicyModel[] = [];\n\n    /**\n     * Constructor.\n     */\n    constructor() { }\n\n    /**\n     *  Add a policy to the service.\n     *\n     * @param  key\n     * @param  value\n     */\n    addPolicy(key: string, value?: any): boolean {\n        if (this.policies.findIndex(policy => policy.name == key) < 0) {\n            let policy = new PolicyModel({ name: key });\n\n            if (value) policy.objects.push(value);\n\n            this.policies.push(policy);\n\n            return true;\n        } else {\n            let index = this.policies.findIndex(policy => policy.name == key);\n\n            if (value && !this.policies[index].objects[value]) {\n                this.policies[index].objects.push(value);\n\n                return true;\n            }\n\n            return false;\n        }\n    }\n\n    /**\n     * Check the given policy.\n     *\n     * @param  name\n     * @param  value\n     */\n    checkPolicy(key: string, value: any = null): boolean {\n        let check = false;\n        let policy = this.policies.find(policy => policy.name === key);\n\n        if (policy) {\n            check = true;\n        }\n\n        if (policy && ((value && policy.objects.indexOf(value) >= 0) ||\n            (!value && !policy.objects.length))) {\n            check = true;\n        } else {\n            check = false;\n        }\n\n        return check;\n    }\n\n    /**\n     * Clear all the policies on the service.\n     */\n    clearPolicies(): void {\n        this.policies = [];\n    }\n\n    /**\n     *  Remove a policy that has already been defined.\n     *\n     * @param  key\n     * @param  value\n     */\n    removePolicy(key: string, value: any): boolean {\n        let policy = this.policies.find(policy => policy.name === key);\n\n        if (policy && policy.objects.indexOf(value) >= 0) {\n            let index = this.policies.findIndex(policy => policy.name === name);\n            let objectIndexs: any[] = [];\n\n            policy.objects.forEach((o, i) => {\n                if (o == value) {\n                    objectIndexs.push(i);\n                }\n            });\n\n            objectIndexs.forEach(index => delete policy.objects[index]);\n\n            this.policies[index] = policy;\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Http } from './http';\nimport { Authorization } from './authorization';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { UserModel } from '../models/index';\nimport { Config } from './../config';\nimport { Token } from './token';\nimport { Event } from './event';\nimport { Observable, Observer } from 'rxjs';\n\n@Injectable()\nexport class Authentication implements OnDestroy {\n    /**\n     * Create a new instance of the service.\n     *\n     * @param  authorization\n     * @param  config\n     * @param  event\n     * @param  http\n     * @param  httpService\n     * @param  token\n     */\n    constructor(\n        public authorization: Authorization,\n        public config: Config,\n        public event: Event,\n        public http: HttpClient,\n        public httpService: Http,\n        public token: Token\n    ) {\n        this.event.setChannels(this.channels);\n        this.eventListeners();\n    }\n\n    /**\n     * Authorized user.\n     */\n    authUser: any = null;\n\n    /**\n     * State of the user authentication.\n     */\n    authenticated: boolean;\n\n    /**\n     * Event channels.\n     */\n    protected channels: string[] = [\n        'auth:login',\n        'auth:logginIn',\n        'auth:loggedIn',\n        'auth:logout',\n        'auth:loggingOut',\n        'auth:loggedOut',\n        'auth:required',\n        'auth:check',\n        'auth:guarded',\n        'auth:registered',\n    ];\n\n    /**\n     * The redirect data on the service.\n     */\n    private redirect: any = null\n\n    /**\n     * The subsciptions of the service.\n     */\n    subs: any = {};\n\n    /**\n     * The timeouts of the component.\n     */\n    timeouts: any = {};\n\n    /**\n     * On service destroy.\n     */\n    ngOnDestroy(): void {\n        Object.keys(this.subs).forEach(k => this.subs[k].unsubscribe());\n        Object.keys(this.timeouts).forEach(k => clearTimeout(this.timeouts[k]));\n    }\n\n    /**\n     * Check if user is logged in.\n     *\n     * @param  force\n     */\n    check(force: boolean = false): Observable<boolean> {\n        let endpoint = this.config.get('authentication.endpoints.check');\n\n        this.event.broadcast('auth:check');\n\n        return new Observable(observer => {\n            if (this.authenticated === false) {\n                this.checkResolve(observer, false);\n            } else if (this.authenticated === true && !force) {\n                this.event.broadcast('auth:loggedIn', this.user());\n                this.checkResolve(observer, true);\n            } else {\n                this.httpService.tokenHeader().then((token) => {\n                    if (token) {\n                        this.getUser(endpoint).then((res) => {\n                            this.setAuthenticated(true);\n                            this.setUser(res.data || res);\n                            this.event.broadcast('auth:loggedIn', this.user());\n                            this.checkResolve(observer, true);\n                        }, () => {\n                            this.setAuthenticated(false);\n                            this.event.broadcast('auth:required', true);\n                            this.checkResolve(observer, false);\n                        });\n                    } else {\n                        this.setAuthenticated(false);\n                        this.checkResolve(observer, false);\n                    }\n                }, err => observer.error(err));\n            }\n        });\n    }\n\n    /**\n     * Resolve the auth check.\n     *\n     * @param observer\n     * @param authenticated\n     */\n    checkResolve(observer: Observer<boolean>, authenticated: boolean): void {\n        this.event.broadcast('auth:check', authenticated).then(() => {\n            this.timeouts['checkResolve'] = setTimeout(() => {\n                observer.next(authenticated);\n            }, 100);\n        });\n    }\n\n    /**\n     * The service event listeners.\n     */\n    eventListeners(): void {\n        this.subs['auth:loggedIn'] = this.event.listen('auth:loggedIn').subscribe((user) => {\n            this.setAuthenticated(true);\n            this.setUser(user);\n        });\n    }\n\n    /**\n     * Send a forgot password request.\n     *\n     * @param  credentials\n     * @param  endpoint\n     * @param  headers\n     */\n    forgotPassword(data: any, endpoint: string = '', headers = {}): Promise<any> {\n        endpoint = this.config.get(\n            'authentication.endpoints.forgotPassword', endpoint\n        );\n\n        return new Promise((resolve, reject) => {\n            return this.http.post(endpoint, data, headers).toPromise()\n                .then(res => resolve(res), error => reject(error));\n        });\n    }\n\n    /**\n     * Returns the redirect data.\n     */\n    getRedirect(): any {\n        return this.redirect;\n    }\n\n    /**\n     * Get the authentication token.\n     */\n    getToken(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.token.get().then(token => resolve(token), err => reject(err));\n        });\n    }\n\n    /**\n     * Get the current authenticated user.\n     *\n     * @param  endpoint\n     */\n    getUser(endpoint: string = ''): Promise<any> {\n        endpoint = this.config.get('authentication.endpoints.getUser', endpoint);\n\n        return this.http.get(endpoint).toPromise();\n    }\n\n    /**\n     * Get the value authenticated value.\n     */\n    getAuthenticated(): boolean {\n        return this.authenticated;\n    }\n\n    /**\n     * Set if authenticated value.\n     */\n    setAuthenticated(value: boolean): boolean {\n        return this.authenticated = value;\n    }\n\n    /**\n     * Send a login request.\n     *\n     * @param  credentials\n     * @param  endpoint\n     * @param  headers\n     */\n    login(credentials: any, endpoint: string = '', headers = {}): Promise<any> {\n        endpoint = this.config.get('authentication.endpoints.login', endpoint);\n\n        return new Promise((resolve, reject) => {\n            this.http.post(endpoint, credentials, headers).toPromise()\n                .then(res => {\n                    this.onLogin(res).then(() => resolve(res), error => reject(error));\n                }, error => reject(error));\n        });\n    }\n\n    /**\n     * Send a request to log the authenticated user out.\n     */\n    logout(endpoint: string = '', headers = {}): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.event.broadcast('auth:loggingOut').then(() => {\n                endpoint = this.config.get('authentication.endpoints.logout', endpoint);\n\n                if (endpoint) {\n                    this.http.post(endpoint, {}, headers).toPromise().then(res => {\n                        this.onLogout();\n                        resolve(res)\n                    }, error => reject(error));\n                } else {\n                    this.onLogout();\n                    resolve();\n                }\n            });\n        });\n    }\n\n    /**\n     * Actions to perform on login.\n     *\n     * @param  res\n     */\n    onLogin(res: object): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.storeToken(res).then(() => {\n                this.event.broadcast('auth:loggingIn', res).then(() => {\n                    this.resolveUser().then(() => resolve(), err => reject(err));\n                }, err => reject(err));\n            }, err => reject(err));\n        });\n    }\n\n    /**\n     * Actions to perform on logout.\n     */\n    onLogout(): void {\n        this.unauthenticate();\n        this.event.broadcast('auth:loggedOut');\n    }\n\n    /**\n     * Returns and clears the redirect data.\n     */\n    pullRedirect(): any {\n        let redirect = this.redirect;\n\n        this.redirect = null;\n\n        return redirect;\n    }\n\n    /**\n     * Send a register request.\n     *\n     * @param  data\n     * @param   endpoint\n     * @param  headers\n     * @param postRegisterLogin\n     */\n    register(data: object, endpoint: string = '', headers = {}, postRegisterLogin: boolean = false): Promise<any> {\n        endpoint = this.config.get('authentication.endpoints.register', endpoint);\n        return new Promise((resolve, reject) => {\n            this.http.post(endpoint, data, headers).toPromise().then(res => {\n                if (postRegisterLogin) {\n                    this.onLogin(res).then(() => {\n                        resolve(res);\n\n                        this.event.broadcast('auth:registered', res);\n                    }, error => reject(error));\n                } else {\n                    this.event.broadcast('auth:registered', res);\n                }\n            }, error => reject(error));;\n        });\n    }\n\n    /**\n     * Send a reset password request.\n     *\n     * @param   credentials\n     * @param   endpoint\n     * @param  headers\n     */\n    resetPassword(data: any, endpoint: string = '', headers = {}): Promise<any> {\n        endpoint = this.config.get(\n            'authentication.endpoints.resetPassword', endpoint\n        );\n\n        return new Promise((resolve, reject) => {\n            this.http.post(endpoint, data, headers).toPromise().then(res => {\n                this.onLogin(res).then(() => resolve(res))\n            }, error => reject(error));\n        });\n    }\n\n    /**\n     * Resolve the authenticated user.\n     */\n    resolveUser(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.timeouts['resolveUser'] = setTimeout(() => {\n                this.getUser().then((user) => {\n                    this.setAuthenticated(true);\n\n                    this.setUser(user.data || user).then((user) => {\n                        this.event.broadcast('auth:loggedIn', user);\n\n                        resolve();\n                    }, error => reject(error));\n                }, error => reject(error));\n            }, 250);\n        });\n    }\n\n    /**\n     * Set the redirect data.\n     */\n    setRedirect(value: any): any {\n        return this.redirect = value;\n    }\n\n    /**\n     * Set the current authenticated user.\n     *\n     * @param  user\n     */\n    setUser(user: object): Promise<any> {\n        if (user) {\n            user = new UserModel(this.authorization, user);\n        }\n\n        return new Promise((resolve) => resolve(this.authUser = user));\n    }\n\n    /**\n     * Store aut token and broadcast an event.\n     *\n     * @param  res\n     */\n    storeToken(res: any): Promise<any> {\n        return new Promise((resolve) => {\n            this.token.set(this.token.read(res)).then(() => {\n                resolve(res);\n            }, error => console.error(error));\n        });\n    }\n\n    /**\n     * Unauthenticate the current user.\n     */\n    unauthenticate(): void {\n        this.token.remove();\n        this.setAuthenticated(false);\n        this.setUser(null);\n        this.authorization.clearPolicies();\n    }\n\n    /**\n     * Get the current authenticated user.\n     */\n    user = (): any => this.authUser;\n}\n","import { Authentication } from './authentication';\nimport { Authorization } from './authorization';\nimport { Injectable } from '@angular/core';\nimport { Config } from './../config';\nimport { HttpClient } from '@angular/common/http';\nimport { Http } from './http';\nimport { Token } from './token';\nimport { Event } from './event';\n\n@Injectable()\nexport class SocialAuthentication extends Authentication {\n    /**\n     * Constructor.\n     */\n    constructor(\n        public authorization: Authorization,\n        public config: Config,\n        public event: Event,\n        public http: HttpClient,\n        public httpService: Http,\n        public token: Token\n    ) {\n        super(authorization, config, event, http, httpService, token);\n\n        //\n    }\n\n    /**\n     * Login with a social provider.\n     */\n    // login(provider: string, options?: any): Promise<any> {\n    //     return new Promise(() => {\n    //         // this.handleLoginSuccess(res).then((res) => {\n    //         //     this.onLogin(res).then(() => resolve(res));\n    //         // }, (error) => reject(this.handleLoginError(error)))\n    //     });\n    // }\n\n    /**\n     * Handle succesful Facebook login.\n     *\n     * @param  res\n     */\n    handleLoginSuccess(res: object): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.storeSocialCredentials(res);\n\n            this.http.post(\n                this.config.get('authentication.endpoints.socialAuth'),\n                res\n            ).subscribe(res => {\n                this.onLogin(res).then(() => {\n                    resolve(res);\n                }, error => reject(error));\n            }, error => reject(error));\n        });\n    }\n\n    /**\n     * Handle errors on facebook login.\n     *\n     * @param  error\n     */\n    handleLoginError = (error: object) => console.log(error);\n\n    /**\n     * Store social auth crednetials.\n     *\n     * @param  res\n     */\n    storeSocialCredentials(res: any): void {\n        if (res.network == 'facebook') {\n            this.token.set(\n                res.authResponse.accessToken,\n                'facebook_access_token'\n            );\n        }\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { CacheItemModel } from '../models/index';\nimport { Storage } from './storage';\nimport { Config } from './../config';\nimport { Event } from './event';\n\ninterface CacheInterface {\n    [key: string]: CacheItemModel;\n}\n\n@Injectable()\nexport class Cache implements OnDestroy {\n    /**\n     * The name of the cache instance.\n     */\n    cacheName: string = 'ngkit_cache';\n\n    /**\n     * In memory collection of cache.\n     */\n    private _cache: CacheInterface = {};\n\n    /**\n     * Constructor.\n     */\n    constructor(\n        private config: Config,\n        private event: Event,\n        private storage: Storage\n    ) {\n        this.retrieveCache();\n\n        this.subs['auth:loggedOut'] = this.event.listen('auth:loggedOut')\n            .subscribe(() => {\n                this._cache = {};\n                this.clear();\n            });\n    }\n\n    /**\n     * The subsciptions of the service.\n     */\n    subs: any = {};\n\n    /**\n     * On service destroy.\n     */\n    ngOnDestroy(): void {\n        Object.keys(this.subs).forEach(k => this.subs[k].unsubscribe());\n    }\n\n    /**\n     * Retrieve the stored cache.\n     */\n    protected retrieveCache(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.storage.get(this.cacheName).then(cache => {\n                if (cache) {\n                    Object.keys(cache).forEach((item) => {\n                        cache[item] = new CacheItemModel(cache[item])\n                    });\n\n                    this.cache = cache;\n                } else {\n                    this.cache = this.store();\n                }\n\n                resolve(this.cache);\n            }, err => reject(err));\n        });\n    }\n\n    /**\n     * Save the cache to storage.\n     *\n     * @param  key\n     * @param  value\n     */\n    store(): any {\n        this.storage.set(this.cacheName, this._cache);\n\n        return this._cache;\n    }\n\n    /**\n     * Accessor to the in memeory cache.\n     */\n    get cache(): any {\n        return this._cache;\n    }\n\n    /**\n     * Mutator to the in memeory cache.\n     *\n     */\n    set cache(value) {\n        this._cache = value;\n    }\n\n    /**\n     * Get an item from cache.\n     *\n     * @param   key\n     * @param  defautValue\n     */\n    get(key: string, defautValue: any = null): any {\n        if (this.cache[key] && !this.cache[key].isExpired()) {\n            return this.cache[key].value;\n        } else if (defautValue) {\n            return defautValue;\n        } else {\n            this.remove(key);\n\n            return null;\n        }\n    }\n\n    /**\n     * Set an item to cache.\n     *\n     * @param  key\n     * @param  value\n     * @param  expires\n     */\n    set(\n        key: string,\n        value: any,\n        expires: number = this.config.get('cache.expires')\n    ): void {\n        let cacheItem = new CacheItemModel({ value: value, expires: expires });\n\n        this._cache[key] = cacheItem;\n\n        this.store();\n    }\n\n    /**\n     * Remove an item from cache.\n     *\n     * @param key\n     */\n    remove(key: string): void {\n        delete this.cache[key];\n        this.store();\n    }\n\n    /**\n     * Clear the cache.\n     */\n    clear(): void {\n        this.storage.remove(this.cacheName);\n    }\n\n    /**\n     * Get an item from cache and remove it.\n     *\n     * @param  key\n     */\n    pull(key: string): any {\n        let value = this.get(key);\n        this.remove(key);\n\n        return value;\n    }\n\n    /**\n     * Check if cache has an item.\n     *\n     * @param  key\n     */\n    has(key: string): boolean {\n        return this.get(key) !== null ? true : false;\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport {\n    ActivatedRouteSnapshot, CanActivate, CanActivateChild, RouterStateSnapshot\n} from '@angular/router';\nimport { Authentication } from './../services/authentication';\nimport { Event } from './../services/event';\n\n@Injectable()\nexport class AuthGuard implements CanActivate, CanActivateChild, OnDestroy {\n    /**\n     * Create a new instance.\n     *\n     * @param  auth\n     * @param  event\n     */\n    constructor(\n        public auth: Authentication,\n        public event: Event\n    ) { }\n\n    /**\n     * The subsciptions of the service.\n     */\n    subs: any = {};\n\n    /**\n     * On service destroy.\n     */\n    ngOnDestroy(): void {\n        Object.keys(this.subs).forEach(k => this.subs[k].unsubscribe());\n    }\n\n    /**\n     * Determine if the user can activate a route.\n     *\n     * @param route\n     * @param state\n     */\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n        return this.guard(route, state);\n    }\n\n    /**\n     * Determine if the user can activate children of a route.\n     *\n     * @param  route\n     * @param  state     *\n     */\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n        return this.guard(route, state);\n    }\n\n    /**\n     * The method to apply to guard.\n     *\n     * @param route\n     * @param state\n     */\n    guard(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n        route;\n\n        return new Promise((resolve) => {\n            if (this.auth.user()) {\n                resolve(true);\n            } else {\n                this.subs['auth:check'] = this.auth.check().subscribe(check => {\n                    if (check) {\n                        resolve(true);\n                    } else {\n                        this.event.broadcast('auth:modal');\n                        this.auth.setRedirect(state.url);\n                        resolve(false);\n                    }\n                });\n            }\n        });\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { CanActivate, CanActivateChild } from '@angular/router';\nimport { Authentication } from './../services/authentication';\nimport { Event } from './../services/event';\n\n@Injectable()\nexport class AuthResolveGuard implements CanActivate, CanActivateChild, OnDestroy {\n    /**\n     * Create a new instance.\n     *\n     * @param  auth\n     * @param  event\n     */\n    constructor(\n        public auth: Authentication,\n        public event: Event\n    ) { }\n\n    /**\n     * The subsciptions of the service.\n     */\n    subs: any = {};\n\n    /**\n     * On service destroy.\n     */\n    ngOnDestroy(): void {\n        Object.keys(this.subs).forEach(k => this.subs[k].unsubscribe());\n    }\n\n    /**\n     * Determine if the user can activate a route.\n     */\n    canActivate(): Promise<boolean> {\n        return this.guard();\n    }\n\n    /**\n     * Determine if the user can activate children of a route.\n     */\n    canActivateChild(): Promise<boolean> {\n        return this.guard();\n    }\n\n    /**\n     * The method to apply to guard.\n     */\n    guard(): Promise<boolean> {\n        return new Promise((resolve) => {\n            if (this.auth.user()) {\n                resolve(true);\n            } else {\n                this.subs['auth:check'] = this.auth.check().subscribe(() => {\n                    resolve(true);\n                });\n            }\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from './http';\nimport {\n    HttpEvent, HttpHandler, HttpInterceptor as Interceptor, HttpRequest\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class HttpInterceptor implements Interceptor {\n    /**\n     * Create a new instance of the interceptor.\n     *\n     * @param  http\n     */\n    constructor(\n        public http: Http\n    ) { }\n\n    /**\n     * Intercept the http request.\n     *\n     * @param  req\n     * @param  next\n     */\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        req = req.clone({\n            headers: this.http.headers,\n            url: this.http.getUrl(req.url)\n        });\n\n        return next.handle(req);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from './http';\nimport { Event } from './event';\nimport {\n    HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n    /**\n     * Create a new instance of the interceptor.\n     *\n     * @param  http\n     * @param  event\n     */\n    constructor(\n        public http: Http,\n        public event: Event,\n    ) { }\n\n    /**\n     * Intercept the http request.\n     *\n     * @param  req\n     * @param  next\n     */\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(req).pipe(tap(() => { }, (error: any) => {\n            if (error instanceof HttpErrorResponse) {\n                if (error.status === 401) {\n                    this.event.broadcast('auth:required', error);\n                }\n            }\n        }));\n    }\n}\n","import { Config } from './config';\nimport {\n    Authentication, Authorization, Event, Http, SocialAuthentication,\n    Storage, Token, Cache\n} from './services/index';\nimport { AuthGuard, AuthResolveGuard } from './guards/index';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { HttpInterceptor } from './services/http-interceptor';\nimport { AuthInterceptor } from './services/http-auth-interceptor';\n\n/**\n * ngKit Services.\n */\nexport const NGKIT_PROVIDERS: any[] = [\n    Authentication,\n    AuthGuard,\n    AuthResolveGuard,\n    SocialAuthentication,\n    Authorization,\n    Config,\n    Storage,\n    Cache,\n    Event,\n    Http,\n    Token,\n    {\n        provide: HTTP_INTERCEPTORS,\n        useClass: HttpInterceptor,\n        multi: true\n    },\n    {\n        provide: HTTP_INTERCEPTORS,\n        useClass: AuthInterceptor,\n        multi: true\n    }\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NGKIT_PROVIDERS } from './providers';\n\n@NgModule({\n    imports: [HttpClientModule],\n    providers: [\n        ...NGKIT_PROVIDERS,\n    ]\n})\nexport class ngKitModule {\n    /**\n     * ngKit module initializer.\n     *\n     * @param  options\n     */\n    static forRoot(options: any): ModuleWithProviders {\n        return {\n            ngModule: ngKitModule,\n            providers: [\n                { provide: 'ngKitOptions', useValue: options },\n            ]\n        }\n    }\n}\n"],"names":["_.set","_.merge","localForage.createInstance","tslib_1.__extends"],"mappings":"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"}
